import {getWalletApp, initApp, expectCountElement, expectObjectValueEqual} from '../TestUtils.js';

describe('WalletSetup.test.js', () => {
  const app = getWalletApp();
  let walletSetup;

  beforeAll(() => {
    return initApp(app)
      .then(() => walletSetup = app.vm.$refs.walletSetup);
  });

  const defaultAttributesValues = {
      isReadOnly: true,
      displayWalletCreationToolbar: true,
      walletAddress: '0xb460a021b66a1f421970b07262ed11d626b798ef',
      isSpace: false,
      isSpaceAdministrator: false,
      loading: false,
      isAdministration: false,
      autoGenerated: false,
      skipWalletPasswordSet: false,
      browserWalletExists: false,
      displayWalletSetup: false,
      browserWalletBackedUp: false,
      detectedMetamaskAccount: false,
      displayWalletNotExistingYet: false,
      displayWalletBackup: false,
      displayResetPassword: false,
  }

  it('WalletSetup data', () => {
    expectObjectValueEqual(walletSetup, defaultAttributesValues);
  });

  it('WalletSetup visible components', () => {
    const walletSetupHTML = walletSetup.$el.innerHTML;

    expect(walletSetupHTML).toContain('No private key was found in current browser');
    expect(walletSetupHTML).toContain('is displayed in readonly mode');

    expect(walletSetupHTML).not.toContain('Your wallet is not backed up yet');
    expect(walletSetupHTML).not.toContain('Your wallet is not secured yet');
    expect(walletSetupHTML).not.toContain('Space wallet');
    expect(walletSetupHTML).not.toContain('Space administrator');

    expectCountElement(app, 'walletBrowserSetup', 0);
    expectCountElement(app, 'walletMetamaskSetup', 0);
  });

});
